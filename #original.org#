
** Our first script

Our first script will make the cat die!!!

[[images/Dead_Cat.jpg]]

* Creating a new

* Costume

[[#][[[images/arrow.png]]]]

*** Creating a new Costume

First we need to create a new costume for the cat. This will be how it
looks once it has died

Edit the name of the Sprite by clicking on the little blue /i/

[[images/Sprite.png]] [[images/Sprite_Attributes.png]]

There's a video below

[[#][[[images/arrow.png]]]]

 [[#][[[images/arrow.png]]]]

Now click on the /Costumes/ tab and then rename the first costume to
/Alive\_Pet/

[[images/Costumes.png]]

There's a video below showing how to do this if you're stuck

[[#][[[images/arrow.png]]]]

 [[#][[[images/arrow.png]]]]

Now you'll need to import a new costume for your Pet. Use the image
below to help you out here. I chose the angry ghost for mine. Rename it
to =Dead_Pet=

[[images/Edit_Costumes.png]]

There's another video to help below if you need it.

[[#][[[images/arrow.png]]]]

* The First Script

[[#][[[images/arrow.png]]]]

We're going to build a test script first and then use it in a Block if
it works.

If you're used to using Scratch, then look at the /pseudocode (pretend
code)/ below and see if you can build the script yourself. If not then
skip to the slide beneath.

#+BEGIN_EXAMPLE
    when the space key is pressed
    say "You let me die"
    switch to Dead_Pet Costume
    glide for 4 seconds to x:x, y:225
    hide sprite
                            
#+END_EXAMPLE

If you complete the script at any point then skip to the slide to the
right

[[#][[[images/arrow.png]]]]

Here are all the blocks you need to make the script. See if you can
assemble the script now

#+BEGIN_EXAMPLE
    when the space key is pressed
    say "You let me die"
    switch to Dead_Pet Costume
    glide for 4 seconds to x:x, y:225
    hide sprite
                            
#+END_EXAMPLE

[[images/Death_Blocks.png]]

If you need more help then go to the slide below.

[[#][[[images/arrow.png]]]]

Here is the completed Script

[[images/Death_Script.png]]

If you struggle to put it together then look at the slide below

[[#][[[images/arrow.png]]]]

Here's a video showing the script being constructed

** A Problem

If you're script works then when you hit space the Cat dies

However, he stays dead and we can't run the script again

* Resetting the simulation

[[#][[[images/arrow.png]]]]

** A Problem

If you're script works then when you hit space the Cat dies

However, he stays dead and we can't run the script again

[[#][[[images/arrow.png]]]]

** Reset Script

We're now going to make a script that we can use to reset the Cat sprite

If you're getting the hang of this now then just follow the psudocode
below, if not then got to the next slide down. Once you've built a
succesful script navigate right

#+BEGIN_EXAMPLE
    When 'Green Flag' clicked
    Switch to Costume "Alive_Pet"
    Show Sprite
    Goto position x:0, y:-125
                            
#+END_EXAMPLE

[[#][[[images/arrow.png]]]]

Here are all the blocks you need to make the script. See if you can
assemble the script now

#+BEGIN_EXAMPLE
    When 'Green Flag' clicked
    Switch to Costume "Alive_Pet"
    Show Sprite
    Goto position x:0, y:-125               
#+END_EXAMPLE

[[images/Reset_Blocks.png]]

If you need more help then go to the slide below.

[[#][[[images/arrow.png]]]]

Here is the completed Script

[[images/Reset_Script.png]]

If you struggle to put it together then look at the slide below

[[#][[[images/arrow.png]]]]

Here's a video showing the script being constructed

* Functions (Blocks)

[[#][[[images/arrow.png]]]]

** Functions

Functions are extremely important. They allow is to keep our scripts
tidy by grouping them into Blocks. They also allow us to run the same
code over and over again in different parts of our program

This part is easy. You just need to create a new function (Scratch calls
them Blocks) and call it Pet\_Death.

Next *replace* the "When Space is pressed", with your new function.

[[images/Function.png]]

Stuck? Don't worry as it's on the next video.

* Hungry

[[#][[[images/arrow.png]]]]

** Making the Pet get hungry

[[images/Hungry_Cat.jpg]]

We're now going to make a script that will make the cat get hungry

For this we're going to need a /variable/

[[#][[[images/arrow.png]]]]

A variable is made up of two things

1. Some data that is stored (like numbers or letters)
2. A name that links to that data.

In other words, we can use a variable to store some data in our program

[[#][[[images/arrow.png]]]]

Here's the pseudocode

#+BEGIN_EXAMPLE
    when "Green Flag" clicked
    set Pet_Hunger to 0
    repeat until Pet_Hunger=100
        change Pet_Hunger by 1
        wait 1 second
    Pet_Death
    End All
                            
#+END_EXAMPLE

[[#][[[images/arrow.png]]]]

Here are all the blocks you need to make the script. See if you can
assemble the script now

#+BEGIN_EXAMPLE
    when "Green Flag" clicked
    set Pet_Hunger to 0
    repeat until Pet_Hunger=100
        change Pet_Hunger by 1
        wait 1 second
    Pet_Death
    End All
                            
#+END_EXAMPLE

[[images/Hunger_Blocks.png]]

If you need more help then go to the slide below.

[[#][[[images/arrow.png]]]]

Here is the completed Script

[[images/Hunger_Script.png]]

If you struggle to put it together then look at the slide below

[[#][[[images/arrow.png]]]]

Here's a video showing the script being constructed

* Variables and Loops

[[#][[[images/arrow.png]]]]

** Breaking down the script

You've actually just used some fairly complicated concepts in Computing

*** Variables

The variable starts of storing the number 0. But we can change that
number at any time we like. We added 1 to it within a loop. The name of
the variable stays the same, but the number it points to can change.

[[#][[[images/arrow.png]]]]

*** Loops

Loops are very powerful. We can cause the same set of instructions to
happen over and over again, until some condition is met. In this case
the;

#+BEGIN_EXAMPLE
        change Pet_Hunger by 1
        wait 1 second
                            
#+END_EXAMPLE

keeps happening until Pet\_Hunger reaches 100. Then the loop ends and
the script continues

* Feeding the Pet

[[#][[[images/arrow.png]]]]

** Feeding the Pet

[[images/Pringle_Cat.jpg]]

So we now have a program that basically kills a Cat

To make this into a more entertaining game, we need to be able to feed
our pet

[[#][[[images/arrow.png]]]]

1. Create a new Sprite and choose a costume for it, one that looks like
   food.
2. Give the Sprite a sensible name like Pet\_Food.
3. Create the script detailed below.

#+BEGIN_EXAMPLE
        when This Sprite clicked
        change Pet_Hunger by -10
                            
#+END_EXAMPLE

There's a video on the slide below

[[#][[[images/arrow.png]]]]

** Testing your script

Click the green flag and let your script run

You should see the Pet\_Hunger veriable gradually increase.

When it hits 100, your pet should die

If it doesn't work then get a friend or your teacher to look over your
code so far.

* Pet Thirst

[[#][[[images/arrow.png]]]]

*** Pets get thirsty

[[images/Drinking_Cat.jpeg]]

We now need to create a new script that will make our pet get thirsty.
We're going to use the same method as we used to make the pet get
hungry.

Give it a go now.

[[#][[[images/arrow.png]]]]

** The pseudocode

Firstly create a new variable called Pet\_Thirst

#+BEGIN_EXAMPLE
    when "Green Flag" clicked
    set Pet_Thirst to 0
    repeat until Pet_Thirst=100
        change Pet_Thirst by 1
        wait 1 second
    Pet_Death
    End All
                            
#+END_EXAMPLE

[[#][[[images/arrow.png]]]]

** The blocks

[[images/Thirst_Blocks.png]]
[[#][[[images/arrow.png]]]]

** The script

[[images/Thrist_Script.png]]
[[#][[[images/arrow.png]]]]

** The video

[[#][[[images/arrow.png]]]]

*** Giving the pet a drink

[[images/Wharrgarbl.jpg]]

Let's set up a way to give our pet a drink

Just like when we fed out pet we need a sprite to represent a drink.
This time have a go at drawing the sprite and then setting up a script
so that clicking on it decreases Pet\_thirst

Try to do this without scrolling down.

[[#][[[images/arrow.png]]]]

** The video

* Making the pet sad

[[#][[[images/arrow.png]]]]

** Pets need hugs

[[images/Needy_Cat.jpg]]

The penultimate (second from last) script of this type we're going to
make is one to make our pet happy.

[[#][[[images/arrow.png]]]]

Have a think about this one, before you scroll down and look at the
hints.

We need the pet to start happy and get sadder and sadder as time goes
on. When the pet's happiness reaches zero it should die. If you click on
the pet (we can't really give it a hug), it's happiness should increase

Have a go at completing this yourself before using the hints below

[[#][[[images/arrow.png]]]]

** The pseudocode

#+BEGIN_EXAMPLE
    when "Green Flag" clicked
    set Pet_Contentment to 100
    repeat until Pet_Contentment = 0
        change Pet_Contentment by -1
        wait 1 second
    Pet_Death
    End All
                            
#+END_EXAMPLE

[[#][[[images/arrow.png]]]]

** The Blocks

[[images/Contentment_Blocks.png]]
[[#][[[images/arrow.png]]]]

** The Script

[[images/Contentment_Script.png]] [[#][[[images/arrow.png]]]]

** The video

* Making the Pet Tired

[[#][[[images/arrow.png]]]]

** Pets get sleepy

[[images/Sleepy_Cat.gif]]

The next one is up to you and you alone. Create a script using a
variable called Pet\_Tiredness. It should start at 0 and increase up to
100, at which point the pet dies.

The player can rest the pet by clicking on a pet-bed (you can find,
import or create your own sprite).

/Once you've completed the script, get your teacher to check it./

* Pet Customisation

[[#][[[images/arrow.png]]]]

** The setup so far

[[images/Basic_Scripts.png]] [[#][[[images/arrow.png]]]]

** Customising your Virtual lol Cat

[[images/Computer_Cat.jpg]]

Now for some customisation.

At the moment all the variables are initialised (started) at either 0 or
100. They also change be increments of 1 or -1 and do so in 1 second
steps.

Customise your script a little. Maybe Pet\_Tiredness can start at 200
and be reduced by 0.1 every 2 seconds, for instance

Play around with your variables and loops until you are happy with your
game. Then we can move on to the next section.

* Getting the Pet to Talk

[[#][[[images/arrow.png]]]]

** Getting the pet to talk to you.

[[images/Cheezburger.jpg]]

It might be a good idea to get rid of the variables that are displayed
on the game screen and instead have the pet sprite warn when it is
getting hungry/thirsty or tired

We'll do it the easy way first and then make it a little tricky

[[#][[[images/arrow.png]]]]

** A forever loop

forever loops are quite useful. They will run and run and run. We can
use forever loops to constantly 'listen' out for an event, like a
variable hitting a certain value

We're going to use a forever loop to 'listen' out for when the pet is
hungry, and then get it to run a function.

[[#][[[images/arrow.png]]]]

*** The pseudocode

We're going to need two scripts here. The first will be a forever loop
that listens out for when pet hunger gets too high

The second will be a function that runs when called within the forever
loop

#+BEGIN_EXAMPLE
    def hungry
        ask 'I CAN HAZ CHEEZBURGER?' for two seconds
                            
                            
    when "Green Flag" clicked
        forever
            if Pet_Hunger > 75
                hungry
                            
#+END_EXAMPLE

[[#][[[images/arrow.png]]]]

** The Blocks

[[images/Hungry_Blocks.png]]
[[#][[[images/arrow.png]]]]

** The Script

[[images/Hungry_Script.png]] [[#][[[images/arrow.png]]]]

** The video

* Adding Randomness

[[#][[[images/arrow.png]]]]

** Adding some randomness

[[images/Confused_Cat.jpg]]

It get's boring if all the cat says is

#+BEGIN_QUOTE
  "I CAN HAZ CHEEZBURGER?"
#+END_QUOTE

Lets add some randomness by using a list.

[[#][[[images/arrow.png]]]]

** Lists

[[images/List_Cat.jpg]]

Lists are a type of /Data Structure/.

[[#][[[images/arrow.png]]]]

** An example

1. OH HAI
2. R U K?
3. K THX BAI

This is an example of a list. It contains three items. They are all
strings (letters).

We could put numbers into a list instead if we wanted.

The list is ordered. For instance, the second item is "R U K?"

[[#][[[images/arrow.png]]]]

** Creating a list

You're going to need to create a list and fill it with about five
sentences.

Each sentence should be asking for food in some form

You can use normal English or [[http://speaklolcat.com/][lol speak]] if
you want.

[[#][[[images/arrow.png]]]]

** The video

* Speaking from the List

[[#][[[images/arrow.png]]]]

** Speaking from the list

Next we're going to get the pet to select random elements of the list to
say

To do this we're going to edit the Hungry function

Here's the pseudocode

#+BEGIN_EXAMPLE
    def hungry
        say item (random from 1 to 5) from Hungry
                            
#+END_EXAMPLE

[[#][[[images/arrow.png]]]]

** The blocks

[[images/Random_Block.png]]
[[#][[[images/arrow.png]]]]

** The Script

[[images/Random_Script.png]]
[[#][[[images/arrow.png]]]]

** The video

* Extension

[[#][[[images/arrow.png]]]]

** Now it's your turn

You can now add some extra features to your program

Here are some ideas, or come up with your own...

-  Add lists to give the pet options to speak when it is thirsty and
   tired.
-  Add scripts so that the pet needs exercising. It can even jump up and
   down as it exercises.
-  Add scripts so that the pet needs to go to the toilet.
-  Add scripts so that your pet gets naughtier and naughtier and needs
   telling off.
